'use strict'

const { parallel, series, watch } = require('gulp')
const createTask = require('./gulp.d/lib/create-task')
const exportTasks = require('./gulp.d/lib/export-tasks')
const log = require('fancy-log')
const newer = require('gulp-newer')
const autoprefixer = require('autoprefixer')
const path = require('path')

const bundleName = 'ui'
const buildDir = 'build'
const previewSrcDir = 'preview-src'
const previewDestDir = 'public'
const srcDir = 'src'
const destDir = `${previewDestDir}/_`
// Allow several truthy values for LIVERELOAD (e.g. 'true', '1', 'yes')
const _lr = typeof process.env.LIVERELOAD !== 'undefined' &&
  !['0', 'false', 'no', ''].includes(String(process.env.LIVERELOAD).toLowerCase())
const { reload: livereload } = _lr ? require('gulp-connect') : {}
const serverConfig = { host: '0.0.0.0', port: 5252, livereload }

const task = require('./gulp.d/tasks')

// Glob definitions
const glob = {
  all: [srcDir, previewSrcDir],
  css: `${srcDir}/css/**/*.css`,
  js: ['gulpfile.js', 'gulp.d/**/*.js', `${srcDir}/helpers/*.js`, `${srcDir}/js/**/+([^.])?(.bundle).js`],
  html: `${previewSrcDir}/**/*.html`,
}

// ----------------------
// Base tasks (CI safe)
// ----------------------
const cleanTask = createTask({
  name: 'clean',
  desc: 'Clean files and folders generated by build',
  call: task.remove(['build', 'public']),
})

const lintCssTask = createTask({
  name: 'lint:css',
  desc: 'Lint the CSS source files using stylelint (standard config)',
  call: task.lintCss(glob.css),
})

const lintJsTask = createTask({
  name: 'lint:js',
  desc: 'Lint the JavaScript source files using eslint (JavaScript Standard Style)',
  call: task.lintJs(glob.js),
})

const lintTask = createTask({
  name: 'lint',
  desc: 'Lint the CSS and JavaScript source files',
  call: parallel(lintCssTask, lintJsTask),
})

const formatTask = createTask({
  name: 'format',
  desc: 'Format the JavaScript source files using prettify (JavaScript Standard Style)',
  call: task.format(glob.js),
})

const buildTask = createTask({
  name: 'build',
  desc: 'Build and stage the UI assets for bundling',
  call: series(
    task.build(
      srcDir,
      destDir,
      process.argv.slice(2).some((name) => name.startsWith('preview'))
    ),
    // ensureSiteJs: explicit fallback concatenation to guarantee public/_/js/site.js is created
    function ensureSiteJs () {
      const vfs = require('vinyl-fs')
      const concat = require('gulp-concat')
      const fs = require('fs-extra')
      const path = require('path')
      const srcPattern = path.join(srcDir, 'js', '+([0-9])-*.js')
      const destPath = destDir
      // remove stray js/font directory if it exists
      try { fs.removeSync(path.join(destPath, 'js', 'font')) } catch (e) {}
      return vfs
        .src(srcPattern, { read: true })
        .pipe(concat('js/site.js'))
        .pipe(vfs.dest(destPath))
    }
    ,
    // ensureSiteCss: explicit fallback PostCSS compile to guarantee public/_/css/site.css (and tailwind.css)
    function ensureSiteCss () {
      const fs = require('fs-extra')
      const postcss = require('postcss')
      const postcssImport = require('postcss-import')
      const postcssUrl = require('postcss-url')
      const postcssVar = require('postcss-custom-properties')
      const autoprefixer = require('autoprefixer')
      const cssnano = require('cssnano')
      const path = require('path')

      const inputPath = path.join(srcDir, 'css', 'site.css')
      const outputPath = path.join(destDir, 'css', 'site.css')
      const tailwindIn = path.join(srcDir, 'css', 'vendor', 'tailwind.css')
      const tailwindOut = path.join(destDir, 'css', 'tailwind.css')

  // Remove any stale css/font directory left by older runs so fonts only live
  // under `public/_/font`.
  try { fs.removeSync(path.join(destDir, 'css', 'font')) } catch (e) {}

      return fs.readFile(inputPath, 'utf8').then((css) =>
        postcss([
          postcssImport,
          postcssUrl([
            {
              filter: (asset) => (/^[~][^/]*(?:font|typeface)[^/]*\/.*\/files\/.+\.(?:ttf|woff2?)$/).test(asset.url),
              url: (asset) => {
                const relpath = asset.pathname.slice(1)
                const abspath = require.resolve(relpath)
                const basename = require('path').basename(abspath)
                // Place fonts at destDir/font so they are on same level as css/js
                const destpath = require('path').join(`${destDir}`, 'font', basename)
                if (!fs.pathExistsSync(destpath)) fs.copySync(abspath, destpath)
                return path.join('..', 'font', basename)
              },
            },
          ]),
          postcssVar({ preserve: false }),
          autoprefixer(),
          cssnano({ preset: 'default' }),
        ])
          .process(css, { from: inputPath, to: outputPath })
          .then((result) => fs.outputFile(outputPath, result.css))
      ).then(() => fs.readFile(tailwindIn, 'utf8').then((tcss) => fs.outputFile(tailwindOut, tcss)))
    }
  ),
})

const bundleBuildTask = createTask({
  name: 'bundle:build',
  call: series(cleanTask, lintTask, buildTask, task.writeNojekyll(previewDestDir)),
})

const bundlePackTask = createTask({
  name: 'bundle:pack',
  desc: 'Create a bundle of the staged UI assets for publishing',
  call: task.pack(
    destDir,
    buildDir,
    bundleName,
    (bundlePath) => !process.env.CI && log(`Antora option: --ui-bundle-url=${bundlePath}`)
  ),
})

const bundleTask = createTask({
  name: 'bundle',
  desc: 'Clean, lint, build, and bundle the UI for publishing',
  // Ensure preview images are copied into the staging folder before packing so
  // the UI bundle always contains images referenced by the preview pages.
  call: series(bundleBuildTask, function ensurePreviewImages () {
    const vfs = require('vinyl-fs')
    const path = require('path')
    const srcGlob = '**/*.{png,svg}'
    // Copy preview images into public/_/img preserving relative paths from preview-src
    return vfs.src(srcGlob, { base: previewSrcDir, cwd: previewSrcDir, allowEmpty: true }).pipe(
      vfs.dest(path.join(destDir, 'img'))
    )
  },
  // Copy handlebars layouts and partials into the staging folder so they're included
  // in the ui-bundle. Layouts and partials are required by Antora UI bundles.
  function ensureLayoutsAndPartials () {
    const fs = require('fs-extra')
    const path = require('path')
    const copyLayouts = fs.copy(path.join(process.cwd(), 'src', 'layouts'), path.join(process.cwd(), destDir, 'layouts'), { overwrite: true })
    const copyPartials = fs.copy(path.join(process.cwd(), 'src', 'partials'), path.join(process.cwd(), destDir, 'partials'), { overwrite: true })
    return Promise.all([copyLayouts, copyPartials])
  },
  bundlePackTask),
})

const packTask = createTask({
  name: 'pack',
  desc: '(deprecated; use bundle instead)',
  call: series(bundleTask),
})

// ----------------------
// Optimized preview tasks
// ----------------------

// CSS incremental build â€” process site.css with PostCSS directly for preview
const buildCSS = createTask({
  name: 'preview:build-css',
  call: function () {
    const fs = require('fs-extra')
    const postcssLib = require('postcss')
    const postcssImport = require('postcss-import')
    const postcssUrl = require('postcss-url')
    const postcssVar = require('postcss-custom-properties')

    const inputPath = `${srcDir}/css/site.css`
    const outputPath = `${destDir}/css/site.css`

    return fs.readFile(inputPath, 'utf8').then((css) =>
      postcssLib([
        postcssImport,
        postcssUrl([
          {
            filter: (asset) => (/^[~][^/]*(?:font|typeface)[^/]*\/.*\/files\/.+\.(?:ttf|woff2?)$/).test(asset.url),
            url: (asset) => {
              const relpath = asset.pathname.slice(1)
              const abspath = require.resolve(relpath)
              const basename = require('path').basename(abspath)
              // Place fonts at the same level as css and js: public/_/font
              const destpath = require('path').join(`${destDir}`, 'font', basename)
              if (!fs.pathExistsSync(destpath)) fs.copySync(abspath, destpath)
              return path.join('..', 'font', basename)
            },
          },
        ]),
        postcssVar({ preserve: true }),
        autoprefixer(),
      ])
        .process(css, { from: inputPath, to: outputPath })
        .then((result) => fs.outputFile(outputPath, result.css))
        .then(() => {
          if (livereload) livereload()
        })
    )
  },
})

// Tailwind build for preview (generates compiled tailwind.css into preview dest)
const buildTailwind = createTask({
  name: 'preview:build-tailwind',
  call: function () {
    const fs = require('fs-extra')
    const postcss = require('postcss')
    const tailwindPostCss = require('@tailwindcss/postcss')
    const inputPath = './src/css/vendor/tailwind.css'
    const outputPath = `${destDir}/css/tailwind.css`
    return fs.readFile(inputPath, 'utf8').then((css) =>
      postcss([tailwindPostCss(), autoprefixer()])
        .process(css, { from: inputPath, to: outputPath })
        .then((result) => fs.outputFile(outputPath, result.css))
    )
  },
})

// JS incremental build
const buildJS = createTask({
  name: 'preview:build-js',
  call: function () {
    const dest = `${destDir}/js`
    // reuse the build task for incremental JS preview builds
    return task.build(srcDir, dest, true)()
      .pipe(newer(dest))
      .pipe(livereload ? livereload() : noop())
  },
})

// Preview pages incremental build
const buildPreviewPagesTask = createTask({
  name: 'preview:build-pages',
  call: function () {
    // task.buildPreviewPages returns a function (done) => Promise; call it so we return the Promise
    const safeReload = livereload || (() => {})
    return task.buildPreviewPages(srcDir, previewSrcDir, previewDestDir, safeReload)()
  },
})

// Preview build combining incremental tasks
const previewBuildTask = createTask({
  name: 'preview:build',
  desc: 'Process and stage the UI assets and generate pages for the preview',
  // Build Tailwind first so the generated tailwind.css is available to the preview
  call: series(buildTailwind, parallel(buildCSS, buildJS, buildPreviewPagesTask), task.writeNojekyll(previewDestDir)),
})

// Serve preview with smart watch
const previewServeTask = createTask({
  name: 'preview:serve',
  // Pass the async serve function directly so Gulp receives a function that
  // accepts the `done` callback and doesn't treat the task as synchronous.
  call: task.serve(previewDestDir, serverConfig, () => {
    watch(`${srcDir}/css/**/*.css`, buildCSS)
    watch(`${srcDir}/js/**/*.js`, buildJS)
    // Watch handlebars templates so edits to layouts/partials trigger page rebuilds
    watch([`${srcDir}/layouts/**/*.hbs`, `${srcDir}/partials/**/*.hbs`], buildPreviewPagesTask)
    // Watch preview source (AsciiDoc or HTML) and regenerate pages
    watch([`${previewSrcDir}/**/*.{adoc,asciidoc,html}`], buildPreviewPagesTask)
  }),
})

// Full preview task
const previewTask = createTask({
  name: 'preview',
  desc: 'Generate a preview site and launch a server to view it',
  call: series(previewBuildTask, previewServeTask),
})

// ----------------------
// Export all tasks (CI safe)
// ----------------------
module.exports = exportTasks(
  bundleTask,
  cleanTask,
  lintTask,
  formatTask,
  buildTask,
  bundleTask,
  bundlePackTask,
  previewTask,
  previewBuildTask,
  packTask
)

// ----------------------
// Helpers
// ----------------------
function noop () {
  const through = require('through2')
  return through.obj()
}

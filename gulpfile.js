const { parallel, series, watch } = require('gulp')
const createTask = require('./gulp.d/lib/create-task')
const exportTasks = require('./gulp.d/lib/export-tasks')
const log = require('fancy-log')
const newer = require('gulp-newer')
const autoprefixer = require('autoprefixer')
const path = require('node:path')

const bundleName = 'ui'
const buildDir = 'build'
const previewSrcDir = 'preview-src'
const previewDestDir = 'public'
const srcDir = 'src'
const destDir = `${previewDestDir}/_`
// Allow several truthy values for LIVERELOAD (e.g. 'true', '1', 'yes')
const _lr =
  typeof process.env.LIVERELOAD !== 'undefined' &&
  !['0', 'false', 'no', ''].includes(String(process.env.LIVERELOAD).toLowerCase())
const { reload: livereload } = _lr ? require('gulp-connect') : {}
const serverConfig = { host: '0.0.0.0', port: 5252, livereload }

const task = require('./gulp.d/tasks')

// internal helper tasks moved into gulp.d/tasks
const ensureImages = require('./gulp.d/tasks/ensure-images')
const ensureSiteJs = require('./gulp.d/tasks/ensure-site-js')
const ensureSiteCss = require('./gulp.d/tasks/ensure-site-css')
const ensurePreviewImages = require('./gulp.d/tasks/ensure-preview-images')
const ensureLayoutsPartials = require('./gulp.d/tasks/ensure-layouts-partials')

// Glob definitions
const glob = {
  all: [srcDir, previewSrcDir],
  css: `${srcDir}/css/**/*.css`,
  js: ['gulpfile.js', 'gulp.d/**/*.js', `${srcDir}/helpers/*.js`, `${srcDir}/js/**/+([^.])?(.bundle).js`],
  html: `${previewSrcDir}/**/*.html`
}

// ----------------------
// Base tasks (CI safe)
// ----------------------
const cleanTask = createTask({
  name: 'clean',
  desc: 'Clean files and folders generated by build',
  call: task.remove(['build', 'public'])
})

const buildTask = createTask({
  name: 'build',
  desc: 'Build and stage the UI assets for bundling',
  call: series(
    task.build(
      srcDir,
      destDir,
      process.argv.slice(2).some(name => name.startsWith('preview'))
    ),
    ensureImages(srcDir, destDir),
    ensureSiteJs(srcDir, destDir),
    ensureSiteCss(srcDir, destDir)
  )
})

const bundleBuildTask = createTask({
  name: 'bundle:build',
  call: series(cleanTask, buildTask, task.writeNojekyll(previewDestDir))
})

const bundlePackTask = createTask({
  name: 'bundle:pack',
  desc: 'Create a bundle of the staged UI assets for publishing',
  call: task.pack(
    destDir,
    buildDir,
    bundleName,
    bundlePath => !process.env.CI && log(`Antora option: --ui-bundle-url=${bundlePath}`)
  )
})

const bundleTask = createTask({
  name: 'bundle',
  desc: 'Clean, lint, build, and bundle the UI for publishing',
  // Ensure preview images are copied into the staging folder before packing so
  // the UI bundle always contains images referenced by the preview pages.
  call: series(
    bundleBuildTask,
    () => {
      return ensurePreviewImages(previewSrcDir, destDir)()
    },
    // Copy handlebars layouts and partials into the staging folder so they're included
    // in the ui-bundle. Layouts and partials are required by Antora UI bundles.
    function ensureLayoutsAndPartials() {
      return ensureLayoutsPartials(srcDir, destDir)()
    },
    bundlePackTask
  )
})

const packTask = createTask({
  name: 'pack',
  desc: '(deprecated; use bundle instead)',
  call: series(bundleTask)
})

// ----------------------
// Optimized preview tasks
// ----------------------

// CSS incremental build â€” process site.css with PostCSS directly for preview
const buildCSS = createTask({
  name: 'preview:build-css',
  call: require('./gulp.d/tasks/build-css')(srcDir, destDir, livereload)
})

// Tailwind build for preview (generates compiled tailwind.css into preview dest)
const buildTailwind = createTask({
  name: 'preview:build-tailwind',
  call: require('./gulp.d/tasks/build-tailwind')(srcDir, destDir)
})

// JS incremental build
const buildJS = createTask({
  name: 'preview:build-js',
  call: () => {
    const dest = `${destDir}/js`
    // reuse the build task for incremental JS preview builds
    return task
      .build(srcDir, dest, true)()
      .pipe(newer(dest))
      .pipe(livereload ? livereload() : noop())
  }
})

// Preview pages incremental build
const buildPreviewPagesTask = createTask({
  name: 'preview:build-pages',
  call: () => {
    // task.buildPreviewPages returns a function (done) => Promise; call it so we return the Promise
    const safeReload = livereload || (() => {})
    return task.buildPreviewPages(srcDir, previewSrcDir, previewDestDir, safeReload)()
  }
})

// Preview build combining incremental tasks
const previewBuildTask = createTask({
  name: 'preview:build',
  desc: 'Process and stage the UI assets and generate pages for the preview',
  // Build Tailwind first so the generated tailwind.css is available to the preview
  call: series(buildTailwind, parallel(buildCSS, buildJS, buildPreviewPagesTask), task.writeNojekyll(previewDestDir))
})

// Serve preview with smart watch
const previewServeTask = createTask({
  name: 'preview:serve',
  // Pass the async serve function directly so Gulp receives a function that
  // accepts the `done` callback and doesn't treat the task as synchronous.
  call: task.serve(previewDestDir, serverConfig, () => {
    watch(`${srcDir}/css/**/*.css`, buildCSS)
    watch(`${srcDir}/js/**/*.js`, buildJS)
    // Watch handlebars templates so edits to layouts/partials trigger page rebuilds
    watch([`${srcDir}/layouts/**/*.hbs`, `${srcDir}/partials/**/*.hbs`], buildPreviewPagesTask)
    // Watch preview source (AsciiDoc or HTML) and regenerate pages
    watch([`${previewSrcDir}/**/*.{adoc,asciidoc,html}`], buildPreviewPagesTask)
  })
})

// Full preview task
const previewTask = createTask({
  name: 'preview',
  desc: 'Generate a preview site and launch a server to view it',
  call: series(previewBuildTask, previewServeTask)
})

// ----------------------
// Export all tasks (CI safe)
// ----------------------
module.exports = exportTasks(
  bundleTask,
  cleanTask,
  buildTask,
  bundleTask,
  bundlePackTask,
  previewTask,
  previewBuildTask,
  packTask
)

// ----------------------
// Helpers
// ----------------------
function noop() {
  const through = require('through2')
  return through.obj()
}
